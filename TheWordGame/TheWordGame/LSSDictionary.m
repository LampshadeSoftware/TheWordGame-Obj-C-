//
//  LSSDictionary.m
//  TheWordGame
//
//  Created by Daniel McCrystal on 4/5/15.
//  Copyright (c) 2015 Daniel McCrystal. All rights reserved.
//

#import "LSSDictionary.h"
#import "LSSGame.h"

@implementation LSSDictionary

static NSArray *dictionary;

+(void) initialize {
    // Declare the path for Dictionary.txt
    NSString *path = [[NSBundle mainBundle] pathForResource:@"Dictionary" ofType:@"txt"];
    // Define the contents of Dictionary.txt as a single string
    NSString *entireDictionary = [NSString stringWithContentsOfFile:path encoding:NSUTF8StringEncoding error:nil];
    // Parse the string into the dictionary array
    dictionary = [entireDictionary componentsSeparatedByString:@"\n"];
    
    NSLog(@"Dictionary initialized");
}

+(BOOL)isEnglishWord:(NSString *)newWord {
    // Cycle through all words in the dictionary
    for(NSString *word in dictionary) {
        // If the new word matches with a word in the dictionary...
        if([newWord isEqualToString:word]) {
            return YES;
        }
    }
    // Loop completed without finding a match
    return NO;
}

+(NSString *)getRandomWord {
    // Define a variable as a random integer from 0 (inclusive) to the length of the dictionary array (exclusive)
    int start = arc4random_uniform((int)[dictionary count]);
    // Start at the index defined by the variable, and loop through the dictionary until the word matches the criteria
    for(int i=start; i<(int)[dictionary count]; i++) {
        // Temporary variable that is set to the word at the current index of the dictionary
        NSString *potential = dictionary[i];
        // If the potential word is 4 or 5 letters long...
        if (potential.length == 4 || potential.length == 5) {
            return potential;
        }
    }
    // Loop reached the end of the dictionary without finding a valid word (extremely rare case)
    return @"word";
}

+(NSString *)getSmartRandom {
    // Temporary variable to store the randomly generated word
    NSString *potential;
    // Loop until the break keyword is reached
    while(YES) {
        // Set the variable to a word generated by the getRandomWord method
        potential = [LSSDictionary getRandomWord];
        // If the potential word ends in 's'...
        if([potential characterAtIndex:potential.length-1] == 's') {
            // Go back to the top of the loop
            continue;
        }
        // If there are not enough valid plays off of the potential word...
        if(![LSSDictionary enoughWordsFor:potential]) {
            // Go back to the top of the loop
            continue;
        }
        // Potential word passed the criteria; exit loop
        break;
        
    }
    
    return potential;
}

+(NSMutableArray *)findAllValidWordsFor:(NSString *)word {
    // Declare a temporary game so that the isValidPlay method can be called
    LSSGame *tmp = [[LSSGame alloc] init:@""];
    // Declare an array to store the valid words
    NSMutableArray *validWords = [[NSMutableArray alloc] init];
    
    // Cycle through all the words in the dictionary
    for(NSString *dictWord in dictionary) {
        // If the current word in the dictionary is a valid play on the word parameter...
        if([tmp isValidPlay:dictWord onWord:word]) {
            // Add the current word in the dictionary to the valid words array
            [validWords addObject:dictWord];
        }
    }
    
    return validWords;
}

+(BOOL)enoughWordsFor:(NSString *)word {
    // Declare a temporary game so that the isValidPlay method can be called
    LSSGame *tmp = [[LSSGame alloc] init:@""];
    // Initialize a counter to 0
    int count = 0;
    // Cycle through all the words in the dictionary
    for(NSString *dictWord in dictionary) {
        // If the current word in the dictionary is a valid play on the word parameter...
        if([tmp isValidPlay:dictWord onWord:word]) {
            // Increment the count
            count++;
            // If the count is greater than or equal to 5...
            if(count >= 5) {
                // There are enough valid plays
                return YES;
            }
        }
    }
    // Loop made it all the way through the dictionary without finding enough valid words
    return NO;
    
    // *DISCLAIMER*
    // This method is extremely similar to the findAllValidWords method, so you might be wondering why
    // we don't just call ([[LSSDictionary findAllValidWords] count] >= 5). This method is more efficient
    // because it stops calculating once it hits the desired word minimum.
}


@end
